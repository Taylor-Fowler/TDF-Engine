#version 460

uniform float seeds[2];
uniform float blockSize;
uniform float minimumHeight;
uniform float heightRange;

uniform int chunkWidth;
uniform int chunkDepth;
uniform float chunkCubeWidth;
uniform float chunkCubeDepth;

uniform vec2 cameraPosition;

layout(std430, binding=0) buffer posIn
{
	vec4 PositionIn[];
};

layout(std430, binding=1) buffer posOut
{
	vec4 PositionOut[];
};

layout(std430, binding=2) buffer texCoordOut
{
    vec2 TextureCoordinatesOut[];
};

// Forward declaration
float cnoise(vec2 P);
//float cnoise(vec2 v);


layout(local_size_x = 8, local_size_y = 8) in;
void main(void)
{
    uvec3 verticesCount = gl_NumWorkGroups * gl_WorkGroupSize;
	uint idx = gl_GlobalInvocationID.y * verticesCount.x + gl_GlobalInvocationID.x;
    PositionOut[idx] = PositionIn[idx] + vec4(cameraPosition.x, 0.0, cameraPosition.y, 0.0);

    vec2 noisePosition = vec2(
        (PositionOut[idx].x + seeds[0]) * chunkCubeWidth * 0.2137, 
        (PositionOut[idx].z + seeds[0]) * chunkCubeDepth * 0.2137
    );

    // if chunk width = 10, the uniform chunkWidth would be 0.1
    // x = 20, 20 * 0.1 = 2, 20 would be in chunk 2
    int chunk_x = int(PositionOut[idx].x * chunkCubeWidth);
    int chunk_z = int(PositionOut[idx].z * chunkCubeDepth);
    float chunk_percent_x = (abs(chunk_x * chunkWidth) - abs(PositionOut[idx].x)) / chunkWidth;
    float chunk_percent_z = (abs(chunk_z * chunkDepth) - abs(PositionOut[idx].z)) / chunkDepth;

    // a * 0.5 + b = 0.5
    // a * 0.6 + b = 0.4
    // a * 0.9 + b = 0.1

    if(chunk_percent_x > 0.5)
    {
        chunk_percent_x = 1 - chunk_percent_x;
    }

    if(chunk_percent_z > 0.5)
    {
        chunk_percent_z = 1 - chunk_percent_z;
    }



    


    
    float y = (cnoise(noisePosition) + // -1 to 1
        (cnoise(2 * noisePosition) * 0.5) + // -0.5 to 0.5
        (cnoise(4 * noisePosition) * 0.25)) / 1.75; // -0.25 to 0.25, total -1.75 to 1.75

    y += 1.0;
    y /= 2;
    y = pow(y, 3.74);



    PositionOut[idx].y = minimumHeight + (y * heightRange);
    TextureCoordinatesOut[idx].x = PositionOut[idx].x / blockSize * 0.5;
    TextureCoordinatesOut[idx].y = PositionOut[idx].z / blockSize * 0.5;
}


//
// GLSL textureless classic 2D noise "cnoise",
// with an RSL-style periodic variant "pnoise".
// Author:  Stefan Gustavson (stefan.gustavson@liu.se)
// Version: 2011-08-22
//
// Many thanks to Ian McEwan of Ashima Arts for the
// ideas for permutation and gradient selection.
//
// Copyright (c) 2011 Stefan Gustavson. All rights reserved.
// Distributed under the MIT license. See LICENSE file.
// https://github.com/stegu/webgl-noise
//

vec4 mod289(vec4 x)
{
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 permute(vec4 x)
{
  return mod289(((x*34.0)+1.0)*x);
}

vec4 taylorInvSqrt(vec4 r)
{
  return 1.79284291400159 - 0.85373472095314 * r;
}

vec2 fade(vec2 t) {
  return t*t*t*(t*(t*6.0-15.0)+10.0);
}

// Classic Perlin noise
float cnoise(vec2 P)
{
  vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);
  vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);
  Pi = mod289(Pi); // To avoid truncation effects in permutation
  vec4 ix = Pi.xzxz;
  vec4 iy = Pi.yyww;
  vec4 fx = Pf.xzxz;
  vec4 fy = Pf.yyww;

  vec4 i = permute(permute(ix) + iy);

  vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;
  vec4 gy = abs(gx) - 0.5 ;
  vec4 tx = floor(gx + 0.5);
  gx = gx - tx;

  vec2 g00 = vec2(gx.x,gy.x);
  vec2 g10 = vec2(gx.y,gy.y);
  vec2 g01 = vec2(gx.z,gy.z);
  vec2 g11 = vec2(gx.w,gy.w);

  vec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));
  g00 *= norm.x;  
  g01 *= norm.y;  
  g10 *= norm.z;  
  g11 *= norm.w;  

  float n00 = dot(g00, vec2(fx.x, fy.x));
  float n10 = dot(g10, vec2(fx.y, fy.y));
  float n01 = dot(g01, vec2(fx.z, fy.z));
  float n11 = dot(g11, vec2(fx.w, fy.w));

  vec2 fade_xy = fade(Pf.xy);
  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);
  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);
  return 2.3 * n_xy;
}

// Classic Perlin noise, periodic variant
float pnoise(vec2 P, vec2 rep)
{
  vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);
  vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);
  Pi = mod(Pi, rep.xyxy); // To create noise with explicit period
  Pi = mod289(Pi);        // To avoid truncation effects in permutation
  vec4 ix = Pi.xzxz;
  vec4 iy = Pi.yyww;
  vec4 fx = Pf.xzxz;
  vec4 fy = Pf.yyww;

  vec4 i = permute(permute(ix) + iy);

  vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;
  vec4 gy = abs(gx) - 0.5 ;
  vec4 tx = floor(gx + 0.5);
  gx = gx - tx;

  vec2 g00 = vec2(gx.x,gy.x);
  vec2 g10 = vec2(gx.y,gy.y);
  vec2 g01 = vec2(gx.z,gy.z);
  vec2 g11 = vec2(gx.w,gy.w);

  vec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));
  g00 *= norm.x;  
  g01 *= norm.y;  
  g10 *= norm.z;  
  g11 *= norm.w;  

  float n00 = dot(g00, vec2(fx.x, fy.x));
  float n10 = dot(g10, vec2(fx.y, fy.y));
  float n01 = dot(g01, vec2(fx.z, fy.z));
  float n11 = dot(g11, vec2(fx.w, fy.w));

  vec2 fade_xy = fade(Pf.xy);
  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);
  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);
  return 2.3 * n_xy;
}